app MyTasks {
  wasp: {
    version: "^0.11.1"
  },
  title: "MyTasks",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    tasks    Task[]
    teams    Team[]
psl=}

entity Task {=psl
    id               Int       @id @default(autoincrement())
    title            String    @unique
    description      String
    dueDate          DateTime
    priority         Int       @default(1)
    pomodoroEstimate Int
    done             Boolean   @default(false)
    notes            String
    subtasks         Subtask[]
    group            Group     @relation(fields: [groupId], references: [id])
    user             User      @relation(fields: [userId], references: [id])
    userId           Int
    groupId          Int
    Team             Team?     @relation(fields: [teamId], references: [id])
    teamId           Int?
psl=}

entity Subtask {=psl
    id          Int    @id @default(autoincrement())
    description String
    task        Task   @relation(fields: [taskId], references: [id])
    taskId      Int
psl=}

entity Group {=psl
    id    Int    @id @default(autoincrement())
    title String
    color String
    tasks Task[]
psl=}

entity Team {=psl
    id    Int    @id @default(autoincrement())
    name  String
    users User[]
    tasks Task[]
psl=}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task, User]
}

action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}

action createSubtask {
  fn: import { createSubtask } from "@server/actions.js",
  entities: [Task, Subtask]
}

action updateSubtask {
  fn: import { updateSubtask } from "@server/actions.js",
  entities: [Subtask]
}

query getUserTasks {
  fn: import { getUserTasks } from "@server/queries.js",
  entities: [Task]
}

query getTask {
  fn: import { getTask } from "@server/queries.js",
  entities: [Task]
}

query getSubtasks {
  fn: import { getSubtasks } from "@server/queries.js",
  entities: [Subtask]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route TaskRoute { path: "/task/:taskId", to: TaskDetailPage }
page TaskDetailPage {
  component: import { TaskDetail } from "@client/pages/TaskDetail.jsx",
  authRequired: true
}

route TeamRoute { path: "/team", to: TeamPage }
page TeamPage {
  component: import { Team } from "@client/pages/Team.jsx",
  authRequired: true
}

route StatsRoute { path: "/stats", to: StatsPage }
page StatsPage {
  component: import { Stats } from "@client/pages/Stats.jsx",
  authRequired: true
}
